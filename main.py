from telegram import Update, ChatPermissions
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import datetime

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7990211620:AAHN2ebAGkJHDq0gf2e9DS4B1SvO0AXZtsk"

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
async def get_bot_id(context: ContextTypes.DEFAULT_TYPE) -> int:
    bot_info = await context.bot.get_me()
    return bot_info.id

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à Telegram-–±–æ—Ç.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—Ç–≤–µ—Ç–∞–º–∏
async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.reply_to_message and update.message.text.lower() == "–æ—É":
        replied_user = update.message.reply_to_message.from_user
        replied_username = (
            f"@{replied_user.username}" if replied_user.username else replied_user.full_name
        )
        await update.message.reply_text(f"{replied_username}, —Ç—ë–ª–æ—á–∫—É –Ω–∞ –≤–∏—Ä–µ–Ω–¥–µ –û—É —î—Å!")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ —Å–∞–º–æ–º—É –±–æ—Ç—É
async def is_self(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> bool:
    bot_id = await get_bot_id(context)
    return user_id == bot_id

# –ö–æ–º–∞–Ω–¥–∞ /ban
async def ban(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.reply_to_message:
        user_to_ban = update.message.reply_to_message.from_user
        if await is_self(update, context, user_to_ban.id):
            await update.message.reply_text("–Ø –Ω–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            return
        try:
            await context.bot.ban_chat_member(
                chat_id=update.effective_chat.id, user_id=user_to_ban.id
            )
            await update.message.reply_text(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_ban.full_name} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω üö´"
            )
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
    else:
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /kick
async def kick(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.reply_to_message:
        user_to_kick = update.message.reply_to_message.from_user
        if await is_self(update, context, user_to_kick.id):
            await update.message.reply_text("–Ø –Ω–µ –º–æ–≥—É –∫–∏–∫–Ω—É—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            return
        try:
            await context.bot.ban_chat_member(
                chat_id=update.effective_chat.id, user_id=user_to_kick.id
            )
            await context.bot.unban_chat_member(
                chat_id=update.effective_chat.id, user_id=user_to_kick.id
            )
            await update.message.reply_text(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_kick.full_name} –±—ã–ª –∫–∏–∫–Ω—É—Ç üèÉ"
            )
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
    else:
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /mute
async def mute(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.reply_to_message:
        user_to_mute = update.message.reply_to_message.from_user
        if await is_self(update, context, user_to_mute.id):
            await update.message.reply_text("–Ø –Ω–µ –º–æ–≥—É –∑–∞–º—É—Ç–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            return
        try:
            duration_minutes = 10  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º—É—Ç –Ω–∞ 10 –º–∏–Ω—É—Ç
            if context.args:  # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
                try:
                    duration_minutes = int(context.args[0])
                except ValueError:
                    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç.")
                    return
            mute_time = datetime.timedelta(minutes=duration_minutes)
            until_date = datetime.datetime.utcnow() + mute_time  # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            permissions = ChatPermissions(
                can_send_messages=False,
            )
            await context.bot.restrict_chat_member(
                chat_id=update.effective_chat.id,
                user_id=user_to_mute.id,
                permissions=permissions,
                until_date=until_date,
            )
            await update.message.reply_text(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_mute.full_name} –±—ã–ª –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration_minutes} –º–∏–Ω—É—Ç ü§ê"
            )
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
    else:
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /unmute
async def unmute(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.reply_to_message:
        user_to_unmute = update.message.reply_to_message.from_user
        if await is_self(update, context, user_to_unmute.id):
            await update.message.reply_text("–Ø –Ω–µ –º–æ–≥—É —Ä–∞–∑–º—É—Ç–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            return
        try:
            permissions = ChatPermissions(
                can_send_messages=True,
            )
            await context.bot.restrict_chat_member(
                chat_id=update.effective_chat.id,
                user_id=user_to_unmute.id,
                permissions=permissions,
            )
            await update.message.reply_text(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_unmute.full_name} –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω üó£Ô∏è"
            )
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
    else:
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –±–æ—Ç–∞
def main():
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("ban", ban))
    application.add_handler(CommandHandler("kick", kick))
    application.add_handler(CommandHandler("mute", mute))
    application.add_handler(CommandHandler("unmute", unmute))
    application.add_handler(MessageHandler(filters.REPLY, handle_reply))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤

    application.run_polling()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    main()
